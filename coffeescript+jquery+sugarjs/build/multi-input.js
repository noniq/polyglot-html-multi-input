// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.MultiInput = (function() {
    function MultiInput(textarea, options) {
      var items;
      this.textarea = textarea;
      if (options == null) {
        options = {};
      }
      this.handleSubmit = bind(this.handleSubmit, this);
      this.handleRemoveItem = bind(this.handleRemoveItem, this);
      this.handleKeydown = bind(this.handleKeydown, this);
      this.wrapper = $("<div>").insertAfter(this.textarea);
      this.textarea.hide();
      items = this.textarea.val().split(/\r?\n/).exclude("");
      this.defaultInput = this.createDefaultInput();
      items.forEach((function(_this) {
        return function(item) {
          return _this.addItem(item);
        };
      })(this));
      this.textarea.closest("form").on("submit", this.handleSubmit);
      this.wrapper.on("click", ".mi-remove-button", this.handleRemoveItem);
      this.typeahead = this.initTypeahead(options.typeaheadOptions);
      this.defaultInput.on("keydown", this.handleKeydown);
    }

    MultiInput.prototype.createRemovableInput = function(item) {
      var wrapper;
      wrapper = $("<div class='mi-removable-item'/>").insertBefore(this.defaultInput);
      $("<input type='text' class='mi-input mi-removable'>").val(item).appendTo(wrapper);
      return $("<button type='button' class='mi-remove-button btn btn-danger btn-mini'>â¨‰</button>").appendTo(wrapper);
    };

    MultiInput.prototype.createDefaultInput = function(item) {
      return $("<input type='text' class='mi-input mi-default'>").appendTo(this.wrapper);
    };

    MultiInput.prototype.initTypeahead = function(options) {
      if (!options) {
        return;
      }
      options.updater || (options.updater = (function(_this) {
        return function(item) {
          _this.addItem(item);
          return "";
        };
      })(this));
      return this.defaultInput.typeahead(options);
    };

    MultiInput.prototype.addItem = function(item) {
      return this.createRemovableInput(item);
    };

    MultiInput.prototype.addItemForCurrentInput = function() {
      var value;
      value = this.defaultInput.val();
      if (value.isBlank()) {
        return;
      }
      this.addItem(value);
      return this.defaultInput.val("");
    };

    MultiInput.prototype.currentItems = function() {
      return this.wrapper.find(".mi-input").map(function() {
        return $(this).val();
      }).get();
    };

    MultiInput.prototype.handleKeydown = function(ev) {
      var ref;
      if (ev.keyCode === 13 && !((ref = this.typeahead) != null ? ref.shown : void 0)) {
        ev.preventDefault();
        return this.addItemForCurrentInput();
      }
    };

    MultiInput.prototype.handleRemoveItem = function(ev) {
      ev.preventDefault();
      return $(ev.target).closest(".mi-removable-item").hide("fast", function() {
        return $(this).remove();
      });
    };

    MultiInput.prototype.handleSubmit = function(ev) {
      return this.textarea.val(this.currentItems().join("\n"));
    };

    return MultiInput;

  })();

}).call(this);
